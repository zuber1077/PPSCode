<style>
.CodeMirror {
  height:  600px
}
.container{
    margin-left: -10px;
}

*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
.pt-3, .py-3 {
    padding-top: 0rem!important;
}
</style>
<div>
    <div class="row">
        <div class="col-md-8">
            <textarea id="code-screen">{{content}}</textarea> 
        </div>
        <div class="col-md-4" id="chatbox">
            <div class="row pt-3">
                
                {{!-- chat --}}
                <div class="chat-main">
                    <div class="col-md-12 chat-header rounded-top bg-primary text-white">
                        <div class="row hide-chat-box">
                            <div class="col-md-6 username pl-2" >
                                <i class="fa fa-circle text-success" aria-hidden="true"></i>
                                {{#if user}}
                                <h6 class="m-0 text-white" id="chatbox-username">{{user.name}}</h6>
                                {{/if}}
                            </div>
                            <div class="col-md-6 options text-right pr-2">
                                <i class="fa fa-plus mr-2" aria-hidden="true"></i>
                                <i class="fa fa-video-camera" aria-hidden="true"></i>
                                <i class="fa fa-circle text-success live-video mr-1" aria-hidden="true"></i>
                                <i class="fa fa-phone mr-2" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                    <div class="chat-content">
                        <div class="col-md-12 chats border">
                            <ul class="p-0" id="chatbox-listMessages">
                                
                                {{!-- <li class="p-1 rounded mb-1">
                                    <div class="receive-msg">
                                        <div class="clearfix">
                                            <blockquote class="me pull-left">Hi</blockquote>
                                        </div>
                                    </div>
                                </li> --}}
                            </ul>
                        </div>
                        <div class="message-box border border-top-0">
                            <div class="panel-footer">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Enter message" id="userMessage" />
                                    <span class="input-group-btn" style="height: 32px; padding: 2px 2px 4px;">
                                        <button type="button" class="btn btn-primary btn-sm btn-squared" onclick="sendMessage()">SEND</button>
                                    </span>
                                </div>
                            </div>
                            {{!-- <div class="tools">
                                <i class="fa fa-picture-o" aria-hidden="true"></i>
                                <i class="fa fa-telegram" aria-hidden="true"></i>
                                <i class="fa fa-bell" aria-hidden="true"></i>
                                <i class="fa fa-meh-o" aria-hidden="true"></i>
                                <i class="fa fa-paperclip" aria-hidden="true"></i>
                                <i class="fa fa-gamepad" aria-hidden="true"></i>
                                <i class="fa fa-camera" aria-hidden="true"></i>
                                <i class="fa fa-folder" aria-hidden="true"></i>
                                <i class="fa fa-thumbs-o-up m-0" aria-hidden="true"></i>
                            </div> --}}
                        </div>
                    </div>
                </div>
                {{!-- video --}}
                <div id="video-container">
                    <video autoplay id="second-video"></video>
                    <video autoplay id="my-video" muted="true"></video>
                    <div id="step2">
                        <p>Your ID: <span id="my-id">...</span></p>
                        <div class="form-inline">
                            <input type="text" class="form-control" placeholder="Call User ID ..." id="callto-id">
                            <a href="#" class="btn btn-success" id="make-call">Call</a>
                        </div>
                    </div>
                    <div id="step-3">
                        <p>Talk to <span id="second-id">...</span>
                            <a href="#" class="btn btn-danger" id="end-call">End call</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<input type="hidden" value="{{roomId}}" id="roomId">

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.38.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.38.0/mode/javascript/javascript.min.js"></script>

<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.16/peer.min.js"></script>

<script>
    /*  */
    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;
    /* */

    const socket = io.connect('http://localhost:3000');
    const editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
        lineNumbers: true,
        theme: "midnight"
    });

    var code = $('#code-screen').val();  /* save */

    /* */
    var cmClient;
    function init(str, revision, clients, serverAdapter) {
        if (!code) { /* save */
            editor.setValue(str);
        }
        cmClient = window.cmClient = new EditorClient(
            revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        );
    };

    socket.on('doc', (obj) => {
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
    });
    /* */

    var username = $("#chatbox-username").val();
    if(username === "") {
        var userId = Math.floor(Math.random() * 9999).toString();
        username = `User${userId}`;
        $("#chatbox-username").text(username);
    };

    var roomId = $('#roomId').val();

    /* */
    socket.emit('joinRoom', {room: roomId, username: username});
    /* */

    var userMessage = (name, text) => {
        return ('<li class="p-1 rounded mb-1"><div class="receive-msg"><br><div class="clearfix"><blockquote class="you pull-right">' +'<b>'+ name + '</b> : '+ text + '</blockquote></div></div></li>');
    };

    var sendMessage = () => {
        var userMessage = $('#userMessage').val();
        socket.emit('chatMessage', { message: userMessage, username: username });
        $('#userMessage').val("");
    };

    socket.on('chatMessage', (data) => {
        $('#chatbox-listMessages').append(userMessage(data.username, data.message));
    }); 

    // PEER.JS

    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = new Peer(username + roomId, { key: 'lwjd5qra8257b9'});
    peer.on('open', function(){
      $('#my-id').text(peer.id);
    });
    // Receiving a call
    peer.on('call', function(call){
      // Answer the call automatically (instead of prompting user) for demo purposes
      call.answer(window.localStream);
      step3(call);
    });
    peer.on('error', function(err){
      alert(err.message);
      // Return to step 2 if error occurs
      step2();
    });
    
    // Click handlers setup
    $(function(){
      $('#make-call').click(function(){
        // Initiate a call!
        var call = peer.call($('#callto-id').val(), window.localStream);
        step3(call);
      });
      $('#end-call').click(function(){
        window.existingCall.close();
        step2();
      });
      // Retry if getUserMedia fails
      $('#step1-retry').click(function(){
        $('#step1-error').hide();
        step1();
      });
      // Get things started
      step1();
    });

    function step1 () {
      // Get audio/video stream
      navigator.getUserMedia({audio: true, video: true}, function(stream){
        // Set your video displays
        $('#my-video').prop('src', URL.createObjectURL(stream));
        window.localStream = stream;
        step2();
      }, function(){ $('#step1-error').show(); });
    }

    function step2 () {
      $('#step1, #step3').hide();
      $('#step2').show();
    }

    function step3 (call) {
      // Hang up on an existing call if present
      if (window.existingCall) {
        window.existingCall.close();
      }
      // Wait for stream on the call, then set peer video display
      call.on('stream', function(stream){
        $('#second-video').prop('src', URL.createObjectURL(stream));
      });
      // UI stuff
      window.existingCall = call;
      $('#second-id').text(call.peer);
      call.on('close', step2);
      $('#step1, #step2').hide();
      $('#step3').show();
    }

</script>